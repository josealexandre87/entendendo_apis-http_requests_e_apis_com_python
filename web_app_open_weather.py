import os

import dotenv
import requests
import streamlit as st

# Carrega as vari√°veis de ambiente do arquivo .env
dotenv.load_dotenv(dotenv.find_dotenv())

# Dicion√°rio para tradu√ß√£o das descri√ß√µes do clima retornadas pela API
dict_clima = {
    'c√©u limpo': 'C√©u limpo ‚òÄÔ∏è',
    'algumas nuvens': 'C√©u com algumas nuvens ‚õÖ',
    'nublado': 'Nublado ‚òÅÔ∏è',
    'n√©voa': 'N√©voa üå´Ô∏è',
}

# Fun√ß√£o para fazer uma requisi√ß√£o HTTP e retornar os dados JSON
def fazer_request(url, params=None):
    resposta = requests.get(url=url, params=params)  # Realiza o GET request
    try:
        resposta.raise_for_status()  # Verifica se houve erro na requisi√ß√£o
    except requests.HTTPError as e:
        print(f"Erro no request: {e}")  # Log de erro em caso de falha
        resultado = None
    else:
        resultado = resposta.json()  # Converte a resposta para JSON
    return resultado  # Retorna o resultado da requisi√ß√£o
#---

# Fun√ß√£o para pegar os dados do tempo para uma localidade espec√≠fica
def pegar_tempo_para_local(local):
    app_id = os.environ['CHAVE_API_OPENWEATHER']  # Obt√©m a chave da API do OpenWeather do arquivo .env
    url = f"https://api.openweathermap.org/data/2.5/weather"  # URL da API
    params = {
        'q': local,        # Cidade/localidade
        'appid': app_id,   # Chave da API
        'units': 'metric', # Unidades m√©tricas (Celsius)
        'lang': 'pt_br',   # Idioma (portugu√™s)
    }
    dados_tempo = fazer_request(url=url, params=params)  # Faz a requisi√ß√£o e retorna os dados do tempo
    return dados_tempo
# ---

# Fun√ß√£o principal para rodar o app Streamlit
def main():
    # Cabe√ßalho do Web App
    st.title('Web App Tempo ‚òÄÔ∏è')  # T√≠tulo do aplicativo
    st.write('Dados do OpenWeather (fonte: https://openweathermap.org/current)')  # Fonte de dados

    # Campo de entrada de texto para o usu√°rio digitar uma cidade
    local = st.text_input('Busque uma cidade:')
    if not local:  # Se o campo estiver vazio, para a execu√ß√£o
        st.stop()

    # Acessa dados do OpenWeather para a localidade inserida
    dados_tempo = pegar_tempo_para_local(local=local)
    if not dados_tempo:  # Se n√£o houver dados para a localidade
        st.warning(f'Localidade "{local}" n√£o foi encontrada no banco de dados da OpenWeather!')
        st.stop()

    # Extrai os dados retornados para vari√°veis
    clima_atual = dados_tempo['weather'][0]['description']  # Descri√ß√£o do clima
    clima_atual = dict_clima.get(clima_atual, clima_atual)  # Traduz a descri√ß√£o do clima
    temperatura = dados_tempo['main']['temp']  # Temperatura atual
    sensacao_termica = dados_tempo['main']['feels_like']  # Sensa√ß√£o t√©rmica
    umidade = dados_tempo['main']['humidity']  # Umidade do ar
    cobertura_nuvens = dados_tempo['clouds']['all']  # Cobertura de nuvens

    # Exibe os dados no Web App
    st.metric(label='Tempo atual', value=clima_atual)  # Exibe o clima atual
    col1, col2 = st.columns(2)  # Cria duas colunas para exibir dados
    with col1:
        st.metric(label='Temperatura', value=f'{temperatura} ¬∞C')  # Exibe a temperatura
        st.metric(label='Sensa√ß√£o t√©rmica', value=f'{sensacao_termica} ¬∞C')  # Exibe a sensa√ß√£o t√©rmica
    with col2:
        st.metric(label='Umidade do ar', value=f'{umidade}%')  # Exibe a umidade do ar
        st.metric(label='Cobertura de nuvens', value=f'{cobertura_nuvens}%')  # Exibe a cobertura de nuvens
# ---

# Ponto de entrada do programa
if __name__ == '__main__':
    main()  # Executa a fun√ß√£o principal